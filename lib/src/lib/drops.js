import { __awaiter } from "tslib";
import BN from 'bn.js';
import * as nearAPI from "near-api-js";
const { utils: { format: { parseNearAmount, formatNearAmount }, }, } = nearAPI;
import { assert, assertDropIdUnique, assertValidDropConfig, assertValidFCData, isValidAccountObj } from './checks';
import { getEnv, supportedKeypomContracts } from "./keypom";
import { estimateRequiredDeposit, ftTransferCall, generateKeys, generatePerUsePasswords, getStorageBase, key2str, keypomView, nftTransferCall, parseFTAmount } from "./keypom-utils";
import { getDropInformation, getUserBalance } from './views';
export const KEY_LIMIT = 50;
/**
 * Creates a new drop based on parameters passed in. This drop can have keys that are manually generated and passed in, or automatically generated. If they're
 * automatically generated, they can be based off a set of entropy. For NFT and FT drops, assets can automatically be sent to Keypom to register keys as part of the payload.
 * The deposit is estimated based on parameters that are passed in and the transaction can be returned instead of signed and sent to the network. This can allow you to get the
 * required deposit from the return value and use that to fund the account's Keypom balance to avoid multiple transactions being signed in the case of a drop with many keys.
 *
 * @return {Promise<CreateOrAddReturn>} Object containing: the drop ID, the responses of the execution, as well as any auto generated keys (if any).
 *
 * @example
 * Create a basic simple drop containing 10 keys each with 1 $NEAR. Each key is completely random:
 * ```js
 * // Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
 * // be completely random unless otherwise overwritten.
 * await initKeypom({
 * 	network: "testnet",
 * 	funder: {
 * 		accountId: "benji_demo.testnet",
 * 		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
 * 	}
 * });
 *
 * // Create a drop with 10 completely random keys. The return value `keys` contains information about the generated keys
 * const {keys} = await createDrop({
 * 	numKeys: 10,
 * 	depositPerUseNEAR: 1,
 * });
 *
 * console.log('public keys: ', keys.publicKeys);
 * console.log('private keys: ', keys.secretKeys);
 * ```
 *
 * @example
 * Init funder with root entropy and generate deterministic keys for a drop. Compare with manually generated keys:
 * ```js
 * // Initialize the SDK for the given network and NEAR connection. Root entropy is passed into the funder account so any generated keys
 * // Will be based off that entropy.
 * await initKeypom({
 * 	network: "testnet",
 * 	funder: {
 * 		accountId: "benji_demo.testnet",
 * 		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1",
 * 		rootEntropy: "my-global-secret-password"
 * 	}
 * });
 *
 * // Create a simple drop with 5 keys. Each key will be derived based on the rootEntropy of the funder, the drop ID, and key nonce.
 * const { keys: keysFromDrop, dropId } = await createDrop({
 * 	numKeys: 5,
 * 	depositPerUseNEAR: 1,
 * });
 *
 * // Deterministically Generate the Private Keys:
 * const nonceDropIdMeta = Array.from({length: 5}, (_, i) => `${dropId}_${i}`);
 * const manualKeys = await generateKeys({
 * 	numKeys: 5,
 * 	rootEntropy: "my-global-secret-password",
 * 	metaEntropy: nonceDropIdMeta
 * })
 *
 * // Get the public and private keys from the keys generated by the drop
 * const {publicKeys, secretKeys} = keysFromDrop;
 * // Get the public and private keys from the keys that were manually generated
 * const {publicKeys: pubKeysGenerated, secretKeys: secretKeysGenerated} = manualKeys;
 * // These should match!
 * console.log('secretKeys: ', secretKeys)
 * console.log('secretKeysGenerated: ', secretKeysGenerated)
 *
 * // These should match!
 * console.log('publicKeys: ', publicKeys)
 * console.log('pubKeysGenerated: ', pubKeysGenerated)
 * ```
 *
 * @example
 * Use manually generated keys to create a drop:
 * ```js
 * // Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
 * // be completely random unless otherwise overwritten.
 * await initKeypom({
 * 	network: "testnet",
 * 	funder: {
 * 		accountId: "benji_demo.testnet",
 * 		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
 * 	}
 * });
 *
 * // Generate 10 random keys
 * const {publicKeys} = await generateKeys({
 * 	numKeys: 10
 * });
 *
 * // Create a drop using the keys that were generated. Since keys are passed in, the return value won't contain information about the keys.
 * await createDrop({
 * 	publicKeys,
 * 	depositPerUseNEAR: 1,
 * });
 * ```
 *
 * @example
 * Create a simple drop with 1 key and 1 use per key. This 1 use-key should be password protected based on a base-password:
 * ```js
 * // Initialize the SDK for the given network and NEAR connection
 * await initKeypom({
 * 	network: "testnet",
 * 	funder: {
 * 		accountId: "benji_demo.testnet",
 * 		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
 * 	}
 * });
 *
 *
 * const basePassword = "my-cool-password123";
 * // Create a simple drop with 1 $NEAR and pass in a base password to create a unique password for each use of each key
 * const {keys} = await createDrop({
 * 	numKeys: 1,
 * 	depositPerUseNEAR: 1,
 * 	basePassword
 * });
 *
 * // Create the password to pass into claim which is a hash of the basePassword, public key and whichever use we are on
 * let currentUse = 1;
 * let passwordForClaim = await hashPassword(basePassword + keys.publicKeys[0] + currentUse.toString());
 * ```
 * @group Creating, And Claiming Drops
*/
export const createDrop = ({ account, wallet, dropId, numKeys = 0, publicKeys, rootEntropy, depositPerUseNEAR, depositPerUseYocto, metadata, config = {}, ftData, nftData, simpleData = {}, fcData, basePassword, passwordProtectedUses, useBalance = false, returnTransactions = false, successUrl }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const { near, viewCall, networkId, gas, attachedGas, contractId, receiverId, getAccount, execute, fundingAccountDetails } = getEnv();
    assert(isValidAccountObj(account), 'Passed in account is not a valid account object.');
    account = yield getAccount({ account, wallet });
    assert(supportedKeypomContracts[networkId][contractId] === true, "Only the latest Keypom contract can be used to call this methods. Please update the contract.");
    /// parse args
    if (depositPerUseNEAR) {
        depositPerUseYocto = parseNearAmount(depositPerUseNEAR.toString()) || '0';
    }
    if (!depositPerUseYocto)
        depositPerUseYocto = '0';
    // Ensure that if the dropID is passed in, it's greater than 1 billion
    assert(parseInt(dropId || "1000000000") >= 1000000000, 'All custom drop IDs must be greater than 1_000_000_000');
    if (!dropId)
        dropId = Date.now().toString();
    yield assertDropIdUnique(dropId);
    const finalConfig = {
        uses_per_key: (config === null || config === void 0 ? void 0 : config.usesPerKey) || 1,
        time: config === null || config === void 0 ? void 0 : config.time,
        usage: {
            auto_delete_drop: ((_a = config === null || config === void 0 ? void 0 : config.usage) === null || _a === void 0 ? void 0 : _a.autoDeleteDrop) || false,
            auto_withdraw: ((_b = config === null || config === void 0 ? void 0 : config.usage) === null || _b === void 0 ? void 0 : _b.autoWithdraw) || true,
            permissions: (_c = config === null || config === void 0 ? void 0 : config.usage) === null || _c === void 0 ? void 0 : _c.permissions,
            refund_deposit: (_d = config === null || config === void 0 ? void 0 : config.usage) === null || _d === void 0 ? void 0 : _d.refundDeposit,
        },
        sale: (config === null || config === void 0 ? void 0 : config.sale) ? {
            max_num_keys: (_e = config === null || config === void 0 ? void 0 : config.sale) === null || _e === void 0 ? void 0 : _e.maxNumKeys,
            price_per_key: ((_f = config === null || config === void 0 ? void 0 : config.sale) === null || _f === void 0 ? void 0 : _f.pricePerKeyYocto) || ((_g = config === null || config === void 0 ? void 0 : config.sale) === null || _g === void 0 ? void 0 : _g.pricePerKeyNEAR) ? parseNearAmount((_j = (_h = config === null || config === void 0 ? void 0 : config.sale) === null || _h === void 0 ? void 0 : _h.pricePerKeyNEAR) === null || _j === void 0 ? void 0 : _j.toString()) : undefined,
            allowlist: (_k = config === null || config === void 0 ? void 0 : config.sale) === null || _k === void 0 ? void 0 : _k.allowlist,
            blocklist: (_l = config === null || config === void 0 ? void 0 : config.sale) === null || _l === void 0 ? void 0 : _l.blocklist,
            auto_withdraw_funds: (_m = config === null || config === void 0 ? void 0 : config.sale) === null || _m === void 0 ? void 0 : _m.autoWithdrawFunds,
            start: (_o = config === null || config === void 0 ? void 0 : config.sale) === null || _o === void 0 ? void 0 : _o.start,
            end: (_p = config === null || config === void 0 ? void 0 : config.sale) === null || _p === void 0 ? void 0 : _p.end
        } : undefined,
        root_account_id: config === null || config === void 0 ? void 0 : config.dropRoot,
    };
    assertValidDropConfig(finalConfig);
    // If there are no publicKeys being passed in, we should generate our own based on the number of keys
    if (!publicKeys) {
        var keys;
        // Default root entropy is what is passed in. If there wasn't any, we should check if the funding account contains some.
        const rootEntropyUsed = rootEntropy || (fundingAccountDetails === null || fundingAccountDetails === void 0 ? void 0 : fundingAccountDetails.rootEntropy);
        // If either root entropy was passed into the function or the funder has some set, we should use that.
        if (rootEntropyUsed) {
            // Create an array of size numKeys with increasing strings from 0 -> numKeys - 1. Each element should also contain the dropId infront of the string 
            const nonceDropIdMeta = Array.from({ length: numKeys }, (_, i) => `${dropId}_${i}`);
            keys = yield generateKeys({
                numKeys,
                rootEntropy: rootEntropyUsed,
                metaEntropy: nonceDropIdMeta
            });
        }
        else {
            // No entropy is provided so all keys should be fully random
            keys = yield generateKeys({
                numKeys,
            });
        }
        publicKeys = keys.publicKeys;
    }
    numKeys = publicKeys.length;
    let passwords;
    if (basePassword) {
        assert(numKeys <= 50, "Cannot add 50 keys at once with passwords");
        // Generate the passwords with the base password and public keys. By default, each key will have a unique password for all of its uses unless passwordProtectedUses is passed in
        passwords = yield generatePerUsePasswords({
            publicKeys: publicKeys,
            basePassword,
            uses: passwordProtectedUses || Array.from({ length: (config === null || config === void 0 ? void 0 : config.usesPerKey) || 1 }, (_, i) => i + 1)
        });
    }
    if (ftData) {
        var ftBalancePerUse = (ftData === null || ftData === void 0 ? void 0 : ftData.absoluteAmount) || "0";
        if (ftData.amount) {
            const metadata = viewCall({
                contractId: ftData.contractId,
                methodName: 'ft_metadata',
            });
            ftBalancePerUse = parseFTAmount(ftData.amount.toString(), metadata.decimals);
        }
    }
    assertValidFCData(fcData, depositPerUseYocto, finalConfig.uses_per_key || 1);
    const createDropArgs = {
        drop_id: dropId,
        public_keys: publicKeys || [],
        deposit_per_use: depositPerUseYocto,
        config: finalConfig,
        metadata,
        ft: (ftData === null || ftData === void 0 ? void 0 : ftData.contractId) ? ({
            contract_id: ftData.contractId,
            sender_id: ftData.senderId,
            balance_per_use: ftBalancePerUse,
        }) : undefined,
        nft: (nftData === null || nftData === void 0 ? void 0 : nftData.contractId) ? ({
            contract_id: nftData.contractId,
            sender_id: nftData.senderId,
        }) : undefined,
        fc: (fcData === null || fcData === void 0 ? void 0 : fcData.methods) ? ({
            config: fcData.config ? ({
                attached_gas: (_q = fcData.config) === null || _q === void 0 ? void 0 : _q.attachedGas,
            }) : undefined,
            methods: fcData.methods.map((useMethods) => useMethods ?
                useMethods.map((method) => {
                    let ret = {
                        receiver_id: method.receiverId,
                        method_name: method.methodName,
                        args: method.args,
                        attached_deposit: method.attachedDeposit,
                        account_id_field: method.accountIdField,
                        drop_id_field: method.dropIdField,
                        key_id_field: method.keyIdField,
                        funder_id_field: method.funderIdField,
                        user_args_rule: method.userArgsRule
                    };
                    return ret;
                }) : undefined)
        }) : undefined,
        simple: (simpleData === null || simpleData === void 0 ? void 0 : simpleData.lazyRegister) ? ({
            lazy_register: simpleData.lazyRegister,
        }) : undefined,
        passwords_per_use: passwords
    };
    // If there is no ft data, nft data, or fc data, ensure the deposit per use is greater than 0
    if (createDropArgs.fc === undefined && createDropArgs.ft === undefined && createDropArgs.nft === undefined) {
        assert(depositPerUseYocto != "0", "Deposit per use must be greater than 0 for simple drops");
    }
    /// estimate required deposit
    const storageCalculated = getStorageBase(createDropArgs);
    let requiredDeposit = yield estimateRequiredDeposit({
        near: near,
        depositPerUse: depositPerUseYocto,
        numKeys,
        usesPerKey: finalConfig.uses_per_key || 1,
        attachedGas: parseInt(attachedGas),
        storage: storageCalculated,
        ftData,
        fcData,
    });
    var hasBalance = false;
    if (useBalance) {
        let userBal = yield getUserBalance({ accountId: account.accountId });
        if (userBal < requiredDeposit) {
            throw new Error(`Insufficient balance on Keypom to create drop. Use attached deposit instead.`);
        }
        hasBalance = true;
    }
    const deposit = !hasBalance ? requiredDeposit : '0';
    let transactions = [];
    transactions.push({
        receiverId: receiverId,
        signerId: account.accountId,
        actions: [{
                type: 'FunctionCall',
                params: {
                    methodName: 'create_drop',
                    args: createDropArgs,
                    gas: gas,
                    deposit,
                }
            }]
    });
    if ((ftData === null || ftData === void 0 ? void 0 : ftData.contractId) && (publicKeys === null || publicKeys === void 0 ? void 0 : publicKeys.length)) {
        transactions.push(yield ftTransferCall({
            account: account,
            contractId: ftData.contractId,
            absoluteAmount: new BN(ftBalancePerUse).mul(new BN(numKeys)).mul(new BN(finalConfig.uses_per_key)).toString(),
            dropId,
            returnTransaction: true
        }));
    }
    let tokenIds = nftData === null || nftData === void 0 ? void 0 : nftData.tokenIds;
    if (nftData && tokenIds && (tokenIds === null || tokenIds === void 0 ? void 0 : tokenIds.length) > 0) {
        if (tokenIds.length > 2) {
            throw new Error(`You can only automatically register 2 NFTs with 'createDrop'. If you need to register more NFTs you can use the method 'nftTransferCall' after you create the drop.`);
        }
        const nftTXs = yield nftTransferCall({
            account: account,
            contractId: nftData.contractId,
            tokenIds,
            dropId: dropId.toString(),
            returnTransactions: true
        });
        transactions = transactions.concat(nftTXs);
    }
    if (returnTransactions) {
        return { keys, dropId, transactions, requiredDeposit };
    }
    let responses = yield execute({ transactions, account, wallet, successUrl });
    return { responses, keys, dropId, requiredDeposit };
});
/**
 * Delete a set of drops and optionally withdraw any remaining balance you have on the Keypom contract.
 *
 * @example
 * Create 5 drops and delete each of them:
 * ```js
 * // Initialize the SDK for the given network and NEAR connection
 * await initKeypom({
 * 	network: "testnet",
 * 	funder: {
 * 		accountId: "benji_demo.testnet",
 * 		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
 * 	}
 * });
 *
 * // loop to create 5 simple drops each with 5 more keys than the next
 * for(var i = 0; i < 5; i++) {
 * 	// create 10 keys with no entropy (all random)
 * 	const {publicKeys} = await generateKeys({
 * 		numKeys: 5 * (i+1) // First drop will have 5, then 10, then 15 etc..
 * 	});
 *
 * 	// Create the simple
 * 	await createDrop({
 * 		publicKeys,
 * 		depositPerUseNEAR: 1,
 * 	});
 * }
 *
 * let drops = await getDrops({accountId: "benji_demo.testnet"});
 * console.log('drops: ', drops)
 *
 * await deleteDrops({
 * 	drops
 * })
 *
 * 	// Get the number of drops the account has after deletion (should be zero)
 * 	const numDrops = await getDropSupply({
 * 		accountId: "benjiman.testnet"
 * });
 * console.log('numDrops: ', numDrops)
 * ```
 * @group Deleting State
*/
export const deleteDrops = ({ account, wallet, drops, dropIds, withdrawBalance = true, }) => __awaiter(void 0, void 0, void 0, function* () {
    const { gas300, receiverId, execute, getAccount, networkId, contractId } = getEnv();
    assert(supportedKeypomContracts[networkId][contractId] === true, "Only the latest Keypom contract can be used to call this methods. Please update the contract.");
    assert(isValidAccountObj(account), 'Passed in account is not a valid account object.');
    account = yield getAccount({ account, wallet });
    // If the drop information isn't passed in, we should get it from the drop IDs
    if (!drops) {
        if (!dropIds) {
            throw new Error('Must pass in either drops or dropIds');
        }
        ;
        // For each drop ID in drop IDs, get the drop information	
        drops = [];
        yield Promise.all(yield (dropIds.map((dropId) => __awaiter(void 0, void 0, void 0, function* () {
            drops === null || drops === void 0 ? void 0 : drops.push(yield getDropInformation({ dropId }));
        }))));
    }
    const responses = yield Promise.all(drops.map(({ owner_id, drop_id, registered_uses, ft, nft, }) => __awaiter(void 0, void 0, void 0, function* () {
        assert(owner_id == account.accountId, 'Only the owner of the drop can delete drops.');
        let keySupply;
        let keys;
        const updateKeys = () => __awaiter(void 0, void 0, void 0, function* () {
            let keyPromises = [
                (() => __awaiter(void 0, void 0, void 0, function* () {
                    keySupply = yield keypomView({
                        methodName: 'get_key_supply_for_drop',
                        args: {
                            drop_id: drop_id.toString(),
                        }
                    });
                }))()
            ];
            keyPromises.push((() => __awaiter(void 0, void 0, void 0, function* () {
                keys = yield keypomView({
                    methodName: 'get_keys_for_drop',
                    args: {
                        drop_id: drop_id.toString(),
                        from_index: '0',
                        limit: KEY_LIMIT,
                    }
                });
            }))());
            yield Promise.all(keyPromises);
        });
        yield updateKeys();
        const responses = [];
        if (registered_uses !== 0 && (ft !== undefined || nft !== undefined)) {
            responses.push(...(yield execute({
                account,
                wallet,
                transactions: [{
                        receiverId,
                        actions: [{
                                type: 'FunctionCall',
                                params: {
                                    methodName: 'refund_assets',
                                    args: {
                                        drop_id,
                                    },
                                    gas: gas300,
                                }
                            }],
                    }]
            })));
        }
        const deleteKeys = () => __awaiter(void 0, void 0, void 0, function* () {
            responses.push(...(yield execute({
                account,
                wallet,
                transactions: [{
                        receiverId,
                        actions: [{
                                type: 'FunctionCall',
                                params: {
                                    methodName: 'delete_keys',
                                    args: {
                                        drop_id,
                                        public_keys: keys.map(key2str),
                                    },
                                    gas: gas300,
                                }
                            }],
                    }]
            })));
            if (keySupply > ((keys === null || keys === void 0 ? void 0 : keys.length) || 0)) {
                yield updateKeys();
                yield deleteKeys();
            }
        });
        yield deleteKeys();
        if (withdrawBalance) {
            responses.push(...(yield execute({
                account,
                wallet,
                transactions: [{
                        receiverId,
                        actions: [{
                                type: 'FunctionCall',
                                params: {
                                    methodName: 'withdraw_from_balance',
                                    args: {},
                                    gas: '50000000000000',
                                }
                            }],
                    }]
            })));
        }
        return responses;
    })));
    return responses;
});
// This should be done later. Very small number of drops will have lazy registrations enabled.
// /**
//  * Allows a user to register uses for a simple drop that has lazy registrations enabled. This drop can be over-registered.
//  * 
//  * @param {Account=} account (OPTIONAL) If specified, the passed in account will be used to sign the txn instead of the funder account.
//  * @param {BrowserWalletBehaviour=} wallet (OPTIONAL) If using a browser wallet through wallet selector and that wallet should sign the transaction, pass it in.
//  * @param {string[]=} dropId Specify the drop ID of the drop you want to register uses on
//  * 
//  * @example <caption>Create 5 drops and delete each of them</caption>
//  * ```js
//  * ```
// */
// export const registerUses = async ({
// 	account,
// 	wallet,
// 	dropId,
// 	numUses,
// 	useBalance = false,
// }: RegisterUsesParams) => {
// 	const {
// 		gas300, receiverId, execute, getAccount
// 	} = getEnv()
// 	account = await getAccount({ account, wallet });
// }
//# sourceMappingURL=drops.js.map